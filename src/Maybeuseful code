/* const convertImageLinks = useCallback(async () => {
let imageList = imageLinks.image_list;
let linkDict = {};
linkDict = imageList.map(x => { return ({ src: x, width: 3, height: 2 }) });
dispatch(imageLinksConvert(linkDict))
console.log(linkDict);
}, [dispatch, imageLinks]) */

import React, { useState, useEffect, useRef } from "react";
const Checkmark = ({ selected }) => (
<div style={ selected ? { left: "4px" , top: "4px" , position: "absolute" , zIndex: "1" } : { display: "none" } }>
    <svg style={{ fill: "white" , position: "absolute" }} width="24px" height="24px">
        <circle cx="12.5" cy="12.2" r="8.292" />
    </svg>
    <svg style={{ fill: "#06befa" , position: "absolute" }} width="24px" height="24px">
        <path
            d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" />
    </svg>
</div>
);

const imgStyle = {
transition: "transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s"
};
const selectedImgStyle = {
transform: "translateZ(0px) scale3d(0.9, 0.9, 1)",
transition: "transform .135s cubic-bezier(0.0,0.0,0.2,1),opacity linear .15s"
};
const cont = {
backgroundColor: "#eee",
cursor: "pointer",
overflow: "hidden",
position: "relative"
};
const SelectedImage = ({
index,
photo,
margin,
direction,
top,
left,
selected
}) => {
const [isSelected, setIsSelected] = useState(selected);
//calculate x,y scale
const sx = (100 - (30 / photo.width) * 100) / 100;
const sy = (100 - (30 / photo.height) * 100) / 100;
selectedImgStyle.transform = `translateZ(0px) scale3d(${sx}, ${sy}, 1)`;

if (direction === "column") {
cont.position = "absolute";
cont.left = left;
cont.top = top;
}

const previousUrl = useRef("");
var [url, setUrl] = useState('');
previousUrl.current = url;

const handleOnClick = e => {
setUrl(photo.src);
console.log("previous url " + previousUrl.current)

if (previousUrl.current !== photo.src) {
console.log("select one image only")
}
else {
/* setUrl(e.target.src) */
console.log(url);
/* console.log(photo.key) */
var id = document.getElementsByClassName("not-selected")[0].id;
console.log("id " + id)
}

setIsSelected(!isSelected);
};

useEffect(() => {
setIsSelected(selected);
}, [selected]);
return (
<div style={{ margin, height: photo.height, width: photo.width, ...cont }} className={!isSelected ? "not-selected" : ""
    } id={photo.key}>
    <Checkmark selected={isSelected ? true : false} />

    <img alt={photo.title} style={ isSelected ? { ...imgStyle, ...selectedImgStyle } : { ...imgStyle } } {...photo}
        onClick={handleOnClick} />
    {/* <style>
        {
            `.not-selected:hover {
                outline: 2px solid #06befa
            }

            `
        }
    </style> */}
</div>
);
};

export default SelectedImage;




{/* <div id="carouselExampleIndicators" className="carousel slide" data-ride="carousel">
    <div className="carousel-inner">
        {generatedPhotos.map(photo => {
        return (
        <div className="carousel-item" style={{ minHeight: '300px' }} key={photo.key}>
            <img src={photo.src} className="d-block w-100" alt="..." />
        </div>
        )
        })
        }
    </div>
    <a className="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
        <span className="carousel-control-prev-icon" aria-hidden="true" />
        <span className="sr-only">Previous</span>
    </a>
    <a className="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
        <span className="carousel-control-next-icon" aria-hidden="true" />
        <span className="sr-only">Next</span>
    </a>
</div>



<div id="carouselExampleControls" className="carousel slide" data-bs-ride="carousel">
    <div className="carousel-inner">
        {generatedPhotos.map(photo => {
        return (
        <div className="carousel-item">
            <img style={{ border: selectedImg===photo.src ? "5px solid red" : "" }} src={photo.src} alt="..." />
        </div>
        )
        }
        )}
    </div>
    <button className="carousel-control-prev" type="button" data-bs-target="#carouselExampleControls"
        data-bs-slide="prev">
        <span className="carousel-control-prev-icon" aria-hidden="true" />
        <span className="visually-hidden">Previous</span>
    </button>
    <button className="carousel-control-next" type="button" data-bs-target="#carouselExampleControls"
        data-bs-slide="next">
        <span className="carousel-control-next-icon" aria-hidden="true" />
        <span className="visually-hidden">Next</span>
    </button>
</div> */}







/* if (postI !== post) { generateImages(); dispatch(resetGeneratedImageLinksLoaderFlag()); console.log("condition 1") }
if (selectedQuoteI !== selectedQuote) { generateImages(); dispatch(resetGeneratedImageLinksLoaderFlag());
console.log("condition 2") }
if (urlI !== selectedImageLink) { generateImages(); dispatch(resetGeneratedImageLinksLoaderFlag());
console.log("condition 3") } */


useEffect(() => {
if (step === 3 && imageLinksSuccessFlag === true) {
if (tagLineI !== tagline || postI !== post) {
dispatch(resetImageLinksLoaderFlag());
getImageLinks();
}
/* if (tagLineI !== tagline) { getImageLinks(); dispatch(resetImageLinksLoaderFlag()); }
if (postI !== post) { getImageLinks(); dispatch(resetImageLinksLoaderFlag()); } */
}
}, [step, getImageLinks, imageLinksSuccessFlag, tagLineI, postI, tagline, post, dispatch]);


/* step-1 */
/* useEffect(() => {
if (step === 1) {
if (tagLineI !== tagline || categoryI !== category || postI !== post || mediaTypeI !== mediaType) {
var data = {
tagLine: tagLineI,
category: categoryI,
post: postI,
mediaType: mediaTypeI
}
dispatch(postInfo(data));
}
}
}, [tagLineI, categoryI, postI, mediaTypeI, step, tagline, category, post, mediaType, dispatch]) */


{
resetPasswordSuccess &&
<div>
    <div className="alert alert-success alert-dismissible fade show" role="alert">
        <strong>A link to reset your password has been sent to your email address.</strong>
        <button type="button" className="btn-close" data-bs-dismiss="alert" onClick={removeError}>
        </button>
    </div>
</div>
}
{
resetPasswordError &&
<div>
    <div className="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>{resetPasswordErrorMsg}</strong>
        <button type="button" className="btn-close" data-bs-dismiss="alert" onClick={removeError}>
        </button>
    </div>
</div>
}


/* body {
min-height: 100vh;
font-family: Roboto, Arial;
color: #ADAFB6;
display: flex;
justify-content: center;
align-items: center;
background: rgba(249, 251, 255, 0.6);
} */

.boxes {
height: 32px;
width: 32px;
position: relative;
-webkit-transform-style: preserve-3d;
transform-style: preserve-3d;
-webkit-transform-origin: 50% 50%;
transform-origin: 50% 50%;
margin-top: 32px;
-webkit-transform: rotateX(60deg) rotateZ(45deg) rotateY(0deg) translateZ(0px);
transform: rotateX(60deg) rotateZ(45deg) rotateY(0deg) translateZ(0px);
}

.boxes .box {
width: 32px;
height: 32px;
top: 0px;
left: 0;
position: absolute;
-webkit-transform-style: preserve-3d;
transform-style: preserve-3d;
}



.boxes .box:nth-child(1) {
-webkit-transform: translate(100%, 0);
transform: translate(100%, 0);
-webkit-animation: box1 1s linear infinite;
animation: box1 1s linear infinite;
}

.boxes .box:nth-child(2) {
-webkit-transform: translate(0, 100%);
transform: translate(0, 100%);
-webkit-animation: box2 1s linear infinite;
animation: box2 1s linear infinite;
}

.boxes .box:nth-child(3) {
-webkit-transform: translate(100%, 100%);
transform: translate(100%, 100%);
-webkit-animation: box3 1s linear infinite;
animation: box3 1s linear infinite;
}

.boxes .box:nth-child(4) {
-webkit-transform: translate(200%, 0);
transform: translate(200%, 0);
-webkit-animation: box4 1s linear infinite;
animation: box4 1s linear infinite;
}



.boxes .box>div {
background: #5C8DF6;
--translateZ: 15.5px;
--rotateY: 0deg;
--rotateX: 0deg;
position: absolute;
width: 100%;
height: 100%;
background: #5C8DF6;
top: auto;
right: auto;
bottom: auto;
left: auto;
-webkit-transform: rotateY(var(--rotateY)) rotateX(var(--rotateX)) translateZ(var(--translateZ));
transform: rotateY(var(--rotateY)) rotateX(var(--rotateX)) translateZ(var(--translateZ));
}

.boxes .box>div:nth-child(1) {
top: 0;
left: 0;
background: #5C8DF6;
}

.boxes .box>div:nth-child(2) {
background: #145af2;
right: 0;
--rotateY: 90deg;
}

.boxes .box>div:nth-child(3) {
background: #447cf5;
--rotateX: -90deg;
}

.boxes .box>div:nth-child(4) {
background: #DBE3F4;
top: 0;
left: 0;
--translateZ: -90px;
}





@keyframes box1 {

0%,
50% {
transform: translate(100%, 0);
}

100% {
transform: translate(200%, 0);
}
}

@keyframes box2 {
0% {
transform: translate(0, 100%);
}

50% {
transform: translate(0, 0);
}

100% {
transform: translate(100%, 0);
}
}

@keyframes box3 {

0%,
50% {
transform: translate(100%, 100%);
}

100% {
transform: translate(0, 100%);
}
}

@keyframes box4 {
0% {
transform: translate(200%, 0);
}

50% {
transform: translate(200%, 100%);
}

100% {
transform: translate(100%, 100%);
}
}



useEffect(() => {
function update() {
var cust = document.getElementById('w-slider-mask-0');
console.log(cust);
cust.refresh();
}
if (saveProjectSuccessFlag) {
setCustomPostSwitch(false);
update()
console.log(customPostSwitch + " " + saveProjectSuccessFlag);
}
}, [saveProjectSuccessFlag, customPostSwitch])


if (saveProjectSuccessFlag === true) {
console.log(saveProjectSuccessFlag)
var element = document.getElementById('CP')
var newVal = '<div className="mask-2 w-slider-mask">
    <StepOne tagLineHandler={tagLineHandler} categoryHandler={categoryHandler} postHandler={postHandler}
        mediaTypeHandler={mediaTypeHandler} />
    <StepTwo />
    <StepThree />
    <StepFour />
    <StepFive />
</div>'
element.insertAdjacentHTML('afterbegin', newVal);
}
})


/* useEffect(() => {
if (saveProjectSuccessFlag) {
var stepOne = document.getElementById('stepOne');
stepOne.style = "transform: translateX(0px); opacity: 1; z-index: 14;"
var stepTwo = document.getElementById('stepFive');
stepTwo.style = "transform: translateX(4180px); opacity: 1; z-index: 10; visibility: hidden;"
var tabOne = document.getElementById("w-tabs-0-data-w-pane-0");
tabOne.className = "dashboard-section w-tab-pane w--tab-active";
}
}, [saveProjectSuccessFlag, dispatch]) */

<!-- working -->

/* useEffect(() => {
var flag = false;
var wrapper = document.getElementsByClassName("page-wrapper")[0];
console.log(wrapper)
var projects = document.getElementById('projects');
flag = projects.classList.contains('w--current');
console.log('active', flag);
if (flag) {
wrapper.style.height = 'auto'
}
else {
wrapper.style.height = '100vh'
}
}) */



if (project === '') {
setProjects(res.data);
setDefaultProject('')
console.log("inside project null check")
}
if (res.data.projects.length > projectCount.current) {
projectCount.current = res.data.projects.length;
setProjects(res.data)
setDefaultProject('')
console.log("Total count ", projectCount.current + " actual count", res.data.projects.length)
}